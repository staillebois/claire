---
services:

  ### KAFKA SERVICES ###
  broker:
    image: confluentinc/cp-kafka:7.8.0
    hostname: broker
    container_name: broker
    networks:
      - claire
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'

  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    hostname: schema-registry
    container_name: schema-registry
    networks:
      - claire
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: cnfldemos/cp-server-connect-datagen:0.6.4-7.6.0
    hostname: connect
    container_name: connect
    networks:
      - claire
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.8.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.8.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    ports:
      - "9021:9021"
    networks:
      - claire
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.8.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
      - connect
    ports:
      - "8088:8088"
    networks:
      - claire
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "broker:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_CONNECT_URL: "http://connect:8083"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:7.8.0
    container_name: ksqldb-cli
    networks:
      - claire
    depends_on:
      - broker
      - connect
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  ksql-datagen:
    image: confluentinc/ksqldb-examples:7.8.0
    hostname: ksql-datagen
    container_name: ksql-datagen
    networks:
      - claire
    depends_on:
      - ksqldb-server
      - broker
      - schema-registry
      - connect
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:29092 1 40 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 40 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      STREAMS_BOOTSTRAP_SERVERS: broker:29092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.8.0
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    networks:
      - claire
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  ### ELASTICSEARCH SERVICES ###
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: elasticsearch
    # volumes:
    #   - es-es01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    networks:
      - claire
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --silent --fail localhost:9200/_cluster/health || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    # volumes:
    #   - es-kibana:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - claire
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  ### INFERENCE SERVICES ###
  ollama:
    image: ollama/ollama
    container_name: ollama
    volumes:
      - ollama:/root/.ollama
    ports:
      - 11434:11434
    networks:
      - claire
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*

  ### ClAIre SERVICES ###
  rss-injector:
    container_name: rss-injector
    hostname: rss-injector
    build:
      context: ../rss-injector/
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - claire
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    environment:
      KAFKA_BROKER: broker:29092
      KAFKA_TOPIC: rss-feed
      KAFKA_VALUE_SERIALIZER: io.confluent.kafka.serializers.KafkaAvroSerializer
      SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      # This is the entry point of the platform, add list of your favorite RSS feeds
      RSS_FEEDS: 'https://www.agefi.fr/theme/ia.rss,https://www.actuia.com/feed/,https://intelligence-artificielle.developpez.com/index/rss,https://www.francetvinfo.fr/internet/intelligence-artificielle.rss'
      RSS_DELAY: 600000 # poll every 10 minutes
      XML_JQ_FILTER: '{title: .channel.item.title, description: .channel.item.description, link: .channel.item.link, pubDate: .channel.item.pubDate, category: .channel.item.category}'
      QUARKUS_SSL_NATIVE: true

  rss-embeddings:
    container_name: rss-embeddings
    hostname: rss-embeddings
    build:
      context: ../rss-embeddings/
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - claire
    depends_on:
      - broker
      - schema-registry
      - connect
      - ksqldb-server
    environment:
      MP_MESSAGING_OUTGOING_RSS_EMBEDDINGS_TOPIC: rss-embeddings
      MP_MESSAGING_INCOMING_RSS_FEED_TOPIC: rss-feed
      MP_MESSAGING_INCOMING_RSS_FEED_AUTO_OFFSET_RESET: earliest
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      QUARKUS_LANGCHAIN4J_OLLAMA_BASE_URL: 'http://ollama:11434'
      QUARKUS_LANGCHAIN4J_OLLAMA_LOG_REQUESTS: false
      QUARKUS_LANGCHAIN4J_OLLAMA_TIMEOUT: '120s'
      QUARKUS_LANGCHAIN4J_OLLAMA_EMBEDDING_MODEL_MODEL_ID: 'nomic-embed-text:latest'

  embeddings-indexer:
    container_name: embeddings-indexer
    hostname: embeddings-indexer
    build:
      context: ../embeddings-indexer/
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - claire
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      MP_MESSAGING_INCOMING_RSS_EMBEDDINGS_TOPIC: rss-embeddings
      MP_MESSAGING_INCOMING_RSS_EMBEDDINGS_AUTO_OFFSET_RESET: earliest
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
      MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      ELASTIC_URL: http://elasticsearch:9200
      ELASTIC_SOCKET_TIMEOUT: 50000
      ELASTIC_INDEX_NAME: rss-embeddings

  claire-service:
    container_name: claire-service
    hostname: claire-service
    build:
      context: ../claire-service/
      dockerfile: ./src/main/docker/Dockerfile.jvm
    networks:
      - claire
    ports:
      - 8080:8080
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTIC_URL: http://elasticsearch:9200
      ELASTIC_SOCKET_TIMEOUT: 50000
      ELASTIC_INDEX_NAME: rss-embeddings
      QUARKUS_HTTP_CORS: true
      QUARKUS_HTTP_CORS_ORIGINS: '*'
      QUARKUS_HTTP_CORS_METHODS: GET, OPTIONS, HEAD, PUT, POST
      QUARKUS_LANGCHAIN4J_OLLAMA_BASE_URL: 'http://ollama:11434'
      QUARKUS_LANGCHAIN4J_OLLAMA_LOG_REQUESTS: false
      QUARKUS_LANGCHAIN4J_OLLAMA_TIMEOUT: '120s'
      QUARKUS_LANGCHAIN4J_OLLAMA_EMBEDDING_MODEL_MODEL_ID: 'nomic-embed-text:latest'
      OLLAMA_URL: 'http://ollama:11434'
      OLLAMA_MODEL: deepseek-r1:7b
      OLLAMA_DURATION: 2400

networks:
  claire:
    driver: bridge

volumes:
  # es-es01:
  # es-kibana:
  ollama: